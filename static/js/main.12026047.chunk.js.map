{"version":3,"sources":["hooks/useInputControl.tsx","gameContext.tsx","hooks/useWindowSize.tsx","hooks/useDrawGrid.tsx","hooks/useUpdateGrid.tsx","hooks/useAnimationFrame.tsx","utils.ts","components/Dialog.tsx","components/Marker.tsx","components/PatternSelector.tsx","hooks/useNewGame.tsx","components/About.tsx","components/AboutPrompt.tsx","components/SizeSelector.tsx","hooks/useToggleCell.tsx","components/SizeWarning.tsx","components/SavedGrid.tsx","hooks/useCopyElementText.tsx","App.tsx","hooks/useUpdateGame.tsx","hooks/useStartingGrid.tsx","serviceWorker.ts","index.tsx"],"names":["useInputControl","initialState","React","state","setState","onChange","event","target","checked","Math","max","parseInt","value","GameContext","GameContextProvider","children","canvasRef","canvasContext","setCanvasContext","delay","screenWidth","window","innerWidth","screenHeight","innerHeight","screenSize","setScreenSize","isPC","testString","navigator","userAgent","vendor","test","substr","timer","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","useWindowSize","oddsInputControl","oddsInput","cellSizeInputControl","cellSizeInput","setCellSizeInput","gridSizeInputControl","gridSizeInput","setGridSizeInput","fpsInputControl","fpsInput","patternInputControl","patternInput","customPatternInputControl","customPatternInput","currentGridRef","odds","setOdds","gridSize","setGridSize","cellSize","setCellSize","fps","setFps","pattern","setPattern","customPattern","setCustomPattern","patternSize","predictedSize","drawGrid","globalState","newState","grid","current","clearRect","x","y","fillRect","useDrawGrid","updateGrid","params","length","newGrid","sum","i","j","useUpdateGrid","callback","animationRef","prevTimeRef","countRef","isAnimating","setIsAnimating","reanimate","setReanimate","animate","time","deltaTime","requestAnimationFrame","toggleAnimation","cancelAnimationFrame","undefined","prev","tempPause","useAnimationFrame","pauseFirst","gameContextValue","Provider","changeGridSize","size","sizeDiff","slice","map","row","forEach","push","Array","fill","decompressGrid","compressed","split","cell","shift","decompressed","counter","currentCell","count","decompressCells","createNewGrid","random","createRandomGrid","patternList","name","description","patterns","Dialog","props","dialogContainer","document","createElement","dialog","showDialog","className","onClick","closeDialog","body","appendChild","removeChild","ReactDOM","Marker","style","visibility","show","symbol","PatternSelector","showCategoryDescriptionDialog","setShowCategoryDescriptionDialog","openPatternInfoDialog","info","htmlFor","type","id","categoryDescription","filter","category","Object","values","includes","disabled","entries","useNewGame","newGridSize","About","href","AboutPrompt","localStorage","getItem","showPrompt","setShowPrompt","showAboutDialog","setShowAboutDialog","hidePrompt","setItem","open","SizeSelector","lockGridSizeInputControl","gridLockSizeInput","gridPixelSize","setGridPixelSize","gridPixelSizeFactors","factors","factor","Number","isInteger","unshift","newCellSize","useToggleCell","e","canvasRect","getBoundingClientRect","floor","clientX","clientY","SizeWarning","controlsHeight","min","SavedGrid","elementRef","copyElementText","innerText","clipboard","writeText","useCopyElementText","savedGridElementRef","copySavedGrid","compressedGrid","flatGrid","flat","join","compressGrid","hidden","defaultValue","ref","App","createCanvasContext","node","getContext","newGame","updateGame","useUpdateGame","viewMin","useStartingGrid","toggleCell","showSavedGridDialog","setShowSavedGridDialog","openSavedGridDialog","width","height","Boolean","location","hostname","exec","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","log","message"],"mappings":"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","file":"static/js/main.12026047.chunk.js","sourcesContent":["import * as React from \"react\"\n\n// Generic type variables cannot be narrowed, so type assertions are used (exlanation here: https://stackoverflow.com/a/60476282)\n\n/** Type of state <input> or <select> is being bound to */\ntype TState = boolean | number | string\n\n/** Element that control expects event from */\ntype TElement<T extends TState> = T extends boolean\n  ? HTMLInputElement\n  : HTMLInputElement | HTMLSelectElement\n\n/** Function to be used as onChange in <input> or <select> */\ntype TOnChange<T extends TState> = (\n  event: React.ChangeEvent<TElement<T>>\n) => void\n\n/** Control to be spread onto <input> or <select> */\nexport type TControl<T extends TState> = T extends boolean\n  ? { onChange: TOnChange<T>; checked: boolean }\n  : { onChange: TOnChange<T>; value: T }\n\n/**\n * Creates control to bind an <input> or <select> to a piece of react state\n * Numbers will be non-negative integers\n *\n * @param initialState Initial value of <input> or <select>\n * @returns Control to be spread onto <input> or <select>, & result of React.useState it will be bound to\n */\nexport function useInputControl(\n  initialState: boolean | (() => boolean)\n): [TControl<boolean>, boolean, React.Dispatch<React.SetStateAction<boolean>>]\nexport function useInputControl(\n  initialState: number | (() => number)\n): [TControl<number>, number, React.Dispatch<React.SetStateAction<number>>]\nexport function useInputControl(\n  initialState: string | (() => string)\n): [TControl<string>, string, React.Dispatch<React.SetStateAction<string>>]\nexport function useInputControl<T extends TState>(\n  initialState: T | (() => T)\n): [TControl<T>, T, React.Dispatch<React.SetStateAction<T>>] {\n  const [state, setState] = React.useState(initialState)\n\n  const onChange: TOnChange<T> = React.useCallback(\n    (event: React.ChangeEvent<TElement<T>>) => {\n      switch (typeof state) {\n        case \"boolean\":\n          setState((event.target as HTMLInputElement).checked as T)\n          break\n        case \"number\":\n          setState(Math.max(0, parseInt(event.target.value) || 0) as T)\n          break\n        case \"string\":\n          setState(event.target.value as T)\n          break\n      }\n    },\n    [setState, state]\n  )\n\n  const control: TControl<T> = React.useMemo(() => {\n    switch (typeof state) {\n      case \"boolean\":\n        return { onChange, checked: state } as TControl<T>\n      case \"number\":\n      case \"string\":\n        return { onChange, value: state } as TControl<T>\n    }\n  }, [onChange, state])\n\n  return [control, state, setState]\n}\n","import * as React from \"react\"\nimport { useAnimationFrame } from \"./hooks/useAnimationFrame\"\nimport { IDrawGridParams, useDrawGrid } from \"./hooks/useDrawGrid\"\nimport { TControl, useInputControl } from \"./hooks/useInputControl\"\nimport { useUpdateGrid } from \"./hooks/useUpdateGrid\"\nimport { useWindowSize } from \"./hooks/useWindowSize\"\nimport { TGrid } from \"./utils\"\n\ninterface IGameContextValue {\n  // Canvas properties\n  canvasRef: React.MutableRefObject<HTMLCanvasElement | undefined>\n  canvasContext?: CanvasRenderingContext2D\n  setCanvasContext: React.Dispatch<\n    React.SetStateAction<CanvasRenderingContext2D | undefined>\n  >\n\n  // State for checking size of grid relative to size of screen\n  screenWidth: number\n  screenHeight: number\n\n  // Controls, states, & setStates for grid properties\n  oddsInputControl: TControl<number>\n  oddsInput: number\n  cellSizeInputControl: TControl<number>\n  cellSizeInput: number\n  setCellSizeInput: React.Dispatch<React.SetStateAction<number>>\n  gridSizeInputControl: TControl<number>\n  gridSizeInput: number\n  setGridSizeInput: React.Dispatch<React.SetStateAction<number>>\n  fpsInputControl: TControl<number>\n  fpsInput: number\n  patternInputControl: TControl<string>\n  patternInput: string\n  customPatternInputControl: TControl<string>\n  customPatternInput: string\n\n  // Grid properties\n  currentGridRef: React.MutableRefObject<TGrid>\n  odds: number\n  setOdds: React.Dispatch<React.SetStateAction<number>>\n  gridSize: number\n  setGridSize: React.Dispatch<React.SetStateAction<number>>\n  cellSize: number\n  setCellSize: React.Dispatch<React.SetStateAction<number>>\n  fps: number\n  setFps: React.Dispatch<React.SetStateAction<number>>\n  pattern: string\n  setPattern: React.Dispatch<React.SetStateAction<string>>\n  customPattern: string\n  setCustomPattern: React.Dispatch<React.SetStateAction<string>>\n  patternSize?: number\n\n  // State for checking grid will be smaller than screen\n  predictedSize: number\n\n  // Handles playing & pausing of game\n  toggleAnimation: () => void\n  isAnimating: boolean\n  tempPause: () => void\n  pauseFirst: (callback: () => void) => void\n\n  // Grid functions\n  drawGrid: (newState?: IDrawGridParams) => void\n}\n\nexport const GameContext = React.createContext<IGameContextValue>(\n  {} as IGameContextValue\n)\n\nexport const GameContextProvider: React.FC = ({ children }) => {\n  // Canvas properties\n  const canvasRef = React.useRef<HTMLCanvasElement>()\n  const [canvasContext, setCanvasContext] =\n    React.useState<CanvasRenderingContext2D>()\n\n  // State for checking size of grid relative to size of screen\n  const { screenWidth, screenHeight } = useWindowSize(200)\n\n  // Controls, states, & setStates for grid properties\n  const [oddsInputControl, oddsInput] = useInputControl(50)\n  const [cellSizeInputControl, cellSizeInput, setCellSizeInput] =\n    useInputControl(10)\n  const [gridSizeInputControl, gridSizeInput, setGridSizeInput] =\n    useInputControl(0)\n  const [fpsInputControl, fpsInput] = useInputControl(30)\n  const [patternInputControl, patternInput] = useInputControl(\"Random\")\n  const [customPatternInputControl, customPatternInput] = useInputControl(\"\")\n\n  // Grid properties\n  const currentGridRef = React.useRef<TGrid>([[]])\n  const [odds, setOdds] = React.useState(0)\n  const [gridSize, setGridSize] = React.useState(0)\n  const [cellSize, setCellSize] = React.useState(0)\n  const [fps, setFps] = React.useState(0)\n  const [pattern, setPattern] = React.useState(\"Random\")\n  const [customPattern, setCustomPattern] = React.useState(\"\")\n  const patternSize = React.useMemo(() => {\n    switch (patternInput) {\n      case \"Random\":\n        return undefined\n      case \"Load\":\n        return parseInt(customPatternInput)\n      default:\n        return parseInt(patternInput)\n    }\n  }, [patternInput, customPatternInput])\n\n  // State for checking grid will be smaller than screen\n  const predictedSize = React.useMemo(\n    () => gridSizeInput * cellSizeInput,\n    [gridSizeInput, cellSizeInput]\n  )\n\n  const drawGrid = useDrawGrid({\n    cellSize,\n    currentGridRef,\n    gridSize,\n    canvasContext,\n  })\n  const updateGrid = useUpdateGrid({ currentGridRef })\n\n  // Handles playing & pausing of game\n  const [toggleAnimation, isAnimating, tempPause] = useAnimationFrame(\n    fps,\n    () => {\n      updateGrid()\n      drawGrid()\n    }\n  )\n  /** Pauses game, then runs a given function */\n  const pauseFirst = React.useCallback(\n    (callback: () => void) => {\n      if (isAnimating) {\n        toggleAnimation()\n      }\n      callback()\n    },\n    [isAnimating, toggleAnimation]\n  )\n\n  const gameContextValue = {\n    // Canvas properties\n    canvasRef,\n    canvasContext,\n    setCanvasContext,\n\n    // State for checking size of grid relative to size of screen\n    screenWidth,\n    screenHeight,\n\n    // Controls, states, & setStates for grid properties\n    oddsInputControl,\n    oddsInput,\n    cellSizeInputControl,\n    cellSizeInput,\n    setCellSizeInput,\n    gridSizeInputControl,\n    gridSizeInput,\n    setGridSizeInput,\n    fpsInputControl,\n    fpsInput,\n    patternInputControl,\n    patternInput,\n    customPatternInputControl,\n    customPatternInput,\n\n    // Grid properties\n    currentGridRef,\n    odds,\n    setOdds,\n    gridSize,\n    setGridSize,\n    cellSize,\n    setCellSize,\n    fps,\n    setFps,\n    pattern,\n    setPattern,\n    customPattern,\n    setCustomPattern,\n    patternSize,\n\n    // State for checking grid will be smaller than screen\n    predictedSize,\n\n    // Handles playing & pausing of game\n    toggleAnimation,\n    isAnimating,\n    tempPause,\n    pauseFirst,\n\n    // Grid functions\n    drawGrid,\n  }\n\n  return (\n    <GameContext.Provider value={gameContextValue}>\n      {children}\n    </GameContext.Provider>\n  )\n}\n","import * as React from \"react\"\n\ninterface IDimensions {\n  screenWidth: number\n  screenHeight: number\n}\n\n/**\n * If on PC, updates window size when it has not changed in set amount of time\n * @param delay Time to wait in milliseconds before updating state\n */\nexport function useWindowSize(delay: number): IDimensions {\n  const [screenSize, setScreenSize] = React.useState<IDimensions>({\n    screenWidth: window.innerWidth,\n    screenHeight: window.innerHeight,\n  })\n\n  const isPC = React.useMemo(() => {\n    const testString = navigator.userAgent || navigator.vendor\n    // Regex patterns from http://detectmobilebrowsers.com/\n    const regex1 =\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i\n    const regex2 =\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/\n\n    return !regex1.test(testString) && !regex2.test(testString.substr(0, 4))\n  }, [])\n\n  React.useEffect(() => {\n    if (isPC) {\n      let timer: NodeJS.Timeout\n      const resizeListener = () => {\n        if (timer) {\n          clearTimeout(timer)\n        }\n\n        timer = setTimeout(() => {\n          setScreenSize({\n            screenWidth: window.innerWidth,\n            screenHeight: window.innerHeight,\n          })\n        }, delay)\n      }\n\n      window.addEventListener(\"resize\", resizeListener)\n      return () => {\n        window.removeEventListener(\"resize\", resizeListener)\n      }\n    }\n  }, [delay, isPC])\n\n  return screenSize\n}\n","import * as React from \"react\"\nimport { TGrid } from \"../utils\"\n\ninterface IUseDrawGridParams {\n  canvasContext?: CanvasRenderingContext2D\n  currentGridRef: React.MutableRefObject<TGrid>\n  gridSize: number\n  cellSize: number\n}\n\nexport interface IDrawGridParams {\n  gridSize?: number\n  cellSize?: number\n}\n\nexport function useDrawGrid(\n  globalState: IUseDrawGridParams\n): (newState?: IDrawGridParams) => void {\n  const { canvasContext, currentGridRef } = globalState\n\n  /** Draws passed grid (or currentGrid) onto canvas */\n  const drawGrid = React.useCallback(\n    (newState?: IDrawGridParams) => {\n      // Can use global state, but can be passed new state if global state is not up to date\n      const grid = currentGridRef.current\n      const gridSize = newState?.gridSize ?? globalState.gridSize\n      const cellSize = newState?.cellSize ?? globalState.cellSize\n\n      if (canvasContext && grid?.[gridSize - 1]) {\n        // Without this setTimeout, canvas does not appear to draw when site loads, or after clicking new/update game after changing grid/cell size\n        setTimeout(() => {\n          canvasContext.clearRect(\n            0,\n            0,\n            gridSize * cellSize,\n            gridSize * cellSize\n          )\n          for (let x = 0; x < gridSize; x++) {\n            for (let y = 0; y < gridSize; y++) {\n              if (grid[x][y]) {\n                canvasContext.fillRect(\n                  x * cellSize,\n                  y * cellSize,\n                  cellSize,\n                  cellSize\n                )\n              }\n            }\n          }\n        }, 0)\n      }\n    },\n    [currentGridRef, globalState.gridSize, globalState.cellSize, canvasContext]\n  )\n\n  return drawGrid\n}\n","import * as React from \"react\"\nimport { TGrid } from \"../utils\"\n\nexport function useUpdateGrid(params: {\n  currentGridRef: React.MutableRefObject<TGrid>\n}): () => void {\n  const { currentGridRef } = params\n\n  /**\n   * Creates new grid based on currentGrid state\n   * New grid is set as currentGrid\n   */\n  const updateGrid = React.useCallback(() => {\n    const grid = currentGridRef.current\n    const gridSize = grid.length\n    const newGrid: TGrid = []\n    for (let x = 0; x < gridSize; x++) {\n      newGrid[x] = []\n      for (let y = 0; y < gridSize; y++) {\n        // Count number of live neighbours\n        let sum = 0\n        for (let i = x - 1; i <= x + 1; i++) {\n          for (let j = y - 1; j <= y + 1; j++) {\n            if (\n              (i !== x || j !== y) && // Ignore cell's own value\n              grid[i]?.[j] // Check neighbour is live, and not outside grid\n            ) {\n              sum++\n            }\n          }\n        }\n        // If cell is live & has 2 live neighbours, or cell has 3 live neighbours, make cell live next cycle\n        newGrid[x][y] = (grid[x][y] && sum === 2) || sum === 3\n      }\n    }\n    currentGridRef.current = newGrid\n  }, [currentGridRef])\n\n  return updateGrid\n}\n","import * as React from \"react\"\n\n/**\n * Runs a callback at set number of frames per second, limited by number of frames your browser can render per second\n * @param fps\n * @param callback\n */\nexport function useAnimationFrame(\n  fps: number,\n  callback: () => void\n): [() => void, boolean, () => void] {\n  const animationRef = React.useRef(0)\n  const prevTimeRef = React.useRef<number>()\n  const countRef = React.useRef(0)\n  const [isAnimating, setIsAnimating] = React.useState(false)\n  const [reanimate, setReanimate] = React.useState(false)\n\n  const animate = React.useCallback(\n    (time: number) => {\n      if (prevTimeRef.current) {\n        const deltaTime = time - prevTimeRef.current\n        countRef.current += deltaTime\n        if (countRef.current > 1000 / fps) {\n          countRef.current = countRef.current - 1000 / fps\n          callback()\n        }\n      } else {\n        countRef.current = 0\n        callback()\n      }\n      prevTimeRef.current = time\n      animationRef.current = requestAnimationFrame(time => animate(time))\n    },\n    [callback, fps]\n  )\n\n  /** Pauses animation if playing, plays if paused */\n  const toggleAnimation = React.useCallback(() => {\n    if (isAnimating) {\n      cancelAnimationFrame(animationRef.current)\n    } else {\n      prevTimeRef.current = undefined\n      animationRef.current = requestAnimationFrame(time => animate(time))\n    }\n    setIsAnimating(prev => !prev)\n  }, [isAnimating, animate])\n\n  /** Pauses animation, then plays after any setStates you call have applied */\n  const tempPause = React.useCallback(() => {\n    if (isAnimating) {\n      setReanimate(true)\n      toggleAnimation()\n    }\n  }, [isAnimating, toggleAnimation])\n  React.useEffect(() => {\n    if (reanimate) {\n      setReanimate(false)\n      toggleAnimation()\n    }\n  }, [reanimate])\n\n  return [toggleAnimation, isAnimating, tempPause]\n}\n","export interface IPatternCategory {\n  name: string\n  description: string\n  patterns: Record<string, string>\n}\n\n/** Length of external array & lengths of internal arrays should be equal */\nexport type TGrid = boolean[][]\n\n/**\n * Deep copies TGrid\n * @param grid TGrid to be cloned\n */\nexport const cloneGrid = (grid: TGrid): TGrid => grid.map(row => [...row])\n\n/**\n * Increases/decreases length of external & internal arrays of TGrid to specified length\n * If increasing, pads with false\n * @param grid TGrid to be modified\n * @param size Width/height of new TGrid\n */\nexport const changeGridSize = (grid: TGrid, size: number): TGrid => {\n  const sizeDiff = size - grid.length\n  if (sizeDiff < 0) {\n    grid = grid.slice(0, sizeDiff)\n    grid = grid.map(row => row.slice(0, sizeDiff))\n  } else if (sizeDiff > 0) {\n    grid.forEach(row => {\n      row.push(...Array(sizeDiff).fill(false))\n    })\n    grid.push(...Array(sizeDiff).fill(Array(size).fill(false)))\n  }\n  return grid\n}\n\n/**\n * Returns string of comma separated numbers representing TGrid\n * Flattens TGrid into boolean array, then replaces each run of the same boolean with the length of the run\n * Format: [TGrid width/height, (number of consecutive falses, number of consecutive trues)...]\n * @param grid TGrid to be compressed\n */\nexport const compressGrid = (grid: TGrid): string => {\n  const flatGrid = grid.flat()\n  const compressed = [grid.length]\n  let counter = 0 // Number of consecutive same booleans\n  let currentCell = false // Boolean in current consecutive run\n  flatGrid.forEach(cell => {\n    if (cell === currentCell) {\n      counter++\n    } else {\n      compressed.push(counter)\n      counter = 1\n      currentCell = !currentCell\n    }\n  })\n  compressed.push(counter)\n  return compressed.join(\",\")\n}\n\n/**\n * Reverses compressGrid()\n * @param grid string of comma separated numbers, compressed grid from compressGrid()\n */\nexport const decompressGrid = (grid: string): TGrid => {\n  const compressed: number[] = grid.split(\",\").map(cell => parseInt(cell))\n  const size = compressed.shift() as number // Width/height of resultant grid\n  let decompressed: TGrid = [] // Resulting decompressed grid\n  let row = 0 // Index of decompressed grid currently being added to\n  let counter = size // Number of spaces left of current row\n  let currentCell = false // Boolean to be added to grid\n  compressed.forEach(count => {\n    // Count is current number of consecutive same booleans\n    ;[decompressed, row, counter, currentCell] = decompressCells(\n      size,\n      decompressed,\n      row,\n      counter,\n      currentCell,\n      count\n    )\n  })\n  return decompressed.slice(0, -1)\n}\n\n/**\n * Adds current count of booleans to current row, creating new row if current row fills up\n * @param size Width/height of resultant grid\n * @param decompressed Resulting decompressed grid\n * @param row ndex of decompressed grid currently being added to\n * @param counter Number of spaces left of current row\n * @param currentCell Boolean to be added to grid\n * @param count Remaining number of booleans to be added to grid\n */\nconst decompressCells = (\n  size: number,\n  decompressed: TGrid,\n  row: number,\n  counter: number,\n  currentCell: boolean,\n  count: number\n): [TGrid, number, number, boolean] => {\n  decompressed[row] = decompressed[row] ?? []\n  if (row < size) {\n    if (count < counter) {\n      decompressed[row].push(...Array(count).fill(currentCell))\n      currentCell = !currentCell\n      counter -= count\n    } else {\n      decompressed[row].push(...Array(counter).fill(currentCell))\n      count -= counter\n      counter = size\n      row++\n      ;[decompressed, row, counter, currentCell] = decompressCells(\n        size,\n        decompressed,\n        row,\n        counter,\n        currentCell,\n        count\n      )\n    }\n  }\n  return [decompressed, row, counter, currentCell]\n}\n\n/** Returns randomly populated grid based on odds */\nconst createRandomGrid = (params: {\n  gridSize: number\n  odds: number\n}): TGrid => {\n  const { gridSize, odds } = params\n  const grid: TGrid = []\n  for (let x = 0; x < gridSize; x++) {\n    grid[x] = []\n    for (let y = 0; y < gridSize; y++) {\n      grid[x][y] = Math.random() * 100 < odds\n    }\n  }\n  return grid\n}\n\n/** Returns new grid, type dependant on selected pattern */\nexport const createNewGrid = (params: {\n  customPattern: string\n  gridSize: number\n  odds: number\n  pattern: string\n}): TGrid => {\n  const { customPattern, gridSize, odds, pattern } = params\n  switch (pattern) {\n    case \"Random\":\n      return createRandomGrid({ gridSize, odds })\n    case \"Load\":\n      return changeGridSize(decompressGrid(customPattern), gridSize)\n    default:\n      return changeGridSize(decompressGrid(pattern), gridSize)\n  }\n}\n\nexport const patternList: IPatternCategory[] = [\n  {\n    name: \"Still lifes\",\n    description:\n      \"A still life is a pattern that does not change from one generation to the next.\",\n    patterns: {\n      \"Block, Beehive, Loaf, Boat, Tub\":\n        \"15,16,2,2,2,9,2,2,1,1,1,13,1,25,1,13,1,1,1,12,1,1,1,13,1,3,1,13,1,1,1,9,1,3,1,9,1,1,1,12,1,2,1,12,2,26\",\n    },\n  },\n  {\n    name: \"Oscillators\",\n    description:\n      \"An oscillator is a pattern that returns to its original state after a certain number of generations (shown in brackets).\",\n    patterns: {\n      \"Blinker, Toad, Beacon (2)\":\n        \"10,11,1,9,1,9,1,3,2,8,2,5,1,4,2,2,2,4,2,2,2,8,1,18\",\n      \"Pulsar, Star, Cross (3)\":\n        \"28,31,3,3,3,45,1,4,1,1,1,4,1,15,1,4,1,1,1,4,1,15,1,4,1,1,1,4,1,17,3,3,3,47,3,3,3,17,1,4,1,1,1,4,1,15,1,4,1,1,1,4,1,6,4,5,1,4,1,1,1,4,1,6,1,2,1,22,3,2,3,5,3,3,3,6,1,6,1,20,1,6,1,20,3,2,3,9,1,12,1,2,1,10,3,11,4,8,3,1,3,21,1,5,1,20,2,5,2,18,2,7,2,18,2,5,2,20,1,5,1,21,3,1,3,23,3,26,1,48\",\n      \"Clock (4)\":\n        \"12,4,2,10,2,22,4,7,1,4,1,1,2,3,1,1,2,1,1,1,4,1,2,3,1,3,2,1,1,4,1,7,4,22,2,10,2,4\",\n      \"Octagon (5)\": \"8,3,2,5,1,2,1,3,1,4,1,1,1,6,2,6,1,1,1,4,1,3,1,2,1,5,2,3\",\n      \"Kok's galaxy (8)\":\n        \"13,28,6,1,2,4,6,1,2,11,2,4,2,5,2,4,2,5,2,4,2,5,2,4,2,11,2,1,6,4,2,1,6,28\",\n      \"Pentadecathlon (15)\": \"17,124,1,4,1,9,2,1,4,1,2,9,1,4,1,125\",\n    },\n  },\n  {\n    name: \"Spaceships\",\n    description:\n      \"A spaceship is a pattern that returns to its original state in a different position after a certain number of generations (shown in brackets).\",\n    patterns: {\n      \"Glider (4)\": \"20,2,1,17,1,1,1,18,2,357\",\n      \"Light-weight spaceship (4)\": \"20,0,1,1,1,20,1,19,1,16,1,2,1,17,3,316\",\n      \"Medium-weight spaceship (4)\":\n        \"20,1,1,1,1,20,1,15,1,3,1,19,1,16,1,2,1,17,3,295\",\n      \"Heavy-weight spaceship (4)\":\n        \"20,1,1,1,1,20,1,15,1,3,1,15,1,3,1,19,1,16,1,2,1,17,3,275\",\n    },\n  },\n  {\n    name: \"Methuselahs\",\n    description:\n      \"A methuselah is a small pattern that stabilises after a large number of generations (shown in brackets).\",\n    patterns: {\n      \"R-pentomino (1103)\": \"130,9416,1,129,3,128,1,7222\",\n      \"Diehard (130)\": \"30,309,1,29,2,119,1,27,1,1,1,29,1,379\",\n      \"Acorn (5206)\": \"240,36385,1,237,1,1,1,478,1,240,1,239,1,239,1,19774\",\n    },\n  },\n  {\n    name: \"Guns\",\n    description:\n      \"A gun is a pattern that returns to its original state after a certain number of generations, while launching spaceships.\",\n    patterns: {\n      \"Gosper glider gun\":\n        \"36,7,2,34,2,322,3,32,1,3,1,30,1,5,1,29,1,5,1,32,1,33,1,3,1,32,3,34,1,104,3,33,3,32,1,3,1,66,2,3,2,355,2,34,2,29\",\n    },\n  },\n]\n","import * as React from \"react\"\nimport * as ReactDOM from \"react-dom\"\n\ninterface IProps {\n  closeDialog: () => void\n  showDialog: boolean\n}\n\nexport const Dialog: React.FC<IProps> = props => {\n  const dialogContainer = React.useMemo(() => document.createElement(\"div\"), [])\n\n  const dialog = props.showDialog ? (\n    <div className=\"dialog-background\">\n      <div className=\"dialog\">\n        <button onClick={props.closeDialog}>Close</button>\n        <div className=\"content\">{props.children}</div>\n      </div>\n    </div>\n  ) : null\n\n  React.useEffect(() => {\n    document.body.appendChild(dialogContainer)\n    return () => {\n      document.body.removeChild(dialogContainer)\n    }\n  }, [dialogContainer])\n\n  return ReactDOM.createPortal(dialog, dialogContainer)\n}\n","import * as React from \"react\"\n\ninterface IMarkerProps {\n  symbol: string\n  show: boolean\n}\n\nexport const Marker: React.FC<IMarkerProps> = props => {\n  return (\n    <strong style={{ visibility: props.show ? \"visible\" : \"hidden\" }}>\n      {props.symbol}\n    </strong>\n  )\n}\n","import * as React from \"react\"\nimport { GameContext } from \"../gameContext\"\nimport { patternList } from \"../utils\"\nimport { Dialog } from \"./Dialog\"\nimport { Marker } from \"./Marker\"\n\nexport const PatternSelector: React.FC = () => {\n  const {\n    oddsInputControl,\n    oddsInput,\n    patternInputControl,\n    patternInput,\n    customPatternInputControl,\n    customPatternInput,\n    odds,\n    pattern,\n    customPattern,\n    pauseFirst,\n  } = React.useContext(GameContext)\n\n  const [showCategoryDescriptionDialog, setShowCategoryDescriptionDialog] =\n    React.useState(false)\n\n  const openPatternInfoDialog = React.useCallback(() => {\n    pauseFirst(() => setShowCategoryDescriptionDialog(true))\n  }, [pauseFirst])\n\n  const info = React.useMemo(() => {\n    let patternSize\n    switch (patternInput) {\n      case \"Random\":\n        return (\n          <>\n            <label htmlFor=\"odds\">Cells starting live (%)</label>\n            <input type=\"number\" id=\"odds\" {...oddsInputControl} />\n            <Marker show={oddsInput !== odds} symbol=\"*\" />\n          </>\n        )\n      case \"Load\":\n        patternSize = parseInt(customPatternInput)\n        return (\n          <>\n            <label htmlFor=\"customPattern\">\n              {patternSize\n                ? `Min grid width: ${patternSize} cells`\n                : \"Paste saved grid\"}\n            </label>\n            <input\n              type=\"string\"\n              id=\"customPattern\"\n              {...customPatternInputControl}\n            />\n            <Marker show={customPatternInput !== customPattern} symbol=\"*\" />\n          </>\n        )\n      default:\n        patternSize = parseInt(patternInput)\n        return (\n          <>\n            <span>Min grid width: {patternSize} cells</span>\n            <button onClick={openPatternInfoDialog}>Pattern info</button>\n          </>\n        )\n    }\n  }, [\n    customPattern,\n    customPatternInput,\n    customPatternInputControl,\n    odds,\n    oddsInput,\n    oddsInputControl,\n    patternInput,\n    openPatternInfoDialog,\n  ])\n\n  const categoryDescription = React.useMemo(\n    () =>\n      patternList.filter(category =>\n        Object.values(category.patterns).includes(patternInput)\n      )[0]?.description,\n    [patternInput]\n  )\n\n  return (\n    <>\n      <Dialog\n        closeDialog={() => setShowCategoryDescriptionDialog(false)}\n        showDialog={showCategoryDescriptionDialog}\n      >\n        {categoryDescription}\n      </Dialog>\n      <label htmlFor=\"pattern\">Choose pattern</label>\n      <select id=\"pattern\" {...patternInputControl}>\n        {patternInput === \"\" && (\n          <option value=\"\" disabled>\n            Select pattern\n          </option>\n        )}\n        <option value=\"Random\">Random</option>\n        <option value=\"Load\">Load saved grid</option>\n\n        {patternList.map(category => [\n          <option disabled key={category.name} value={category.name}>\n            ~~{category.name}~~\n          </option>,\n          Object.entries(category.patterns).map(([name, pattern]) => (\n            <option key={name} value={[pattern]}>\n              {name}\n            </option>\n          )),\n        ])}\n      </select>\n      <Marker show={pattern !== patternInput} symbol=\"*\" />\n      {info}\n    </>\n  )\n}\n","import * as React from \"react\"\n\nimport { GameContext } from \"../gameContext\"\nimport { createNewGrid } from \"../utils\"\n\n/** Creates new game based on inputs */\nexport function useNewGame(): (newGridSize?: number) => void {\n  const {\n    oddsInput,\n    cellSizeInput,\n    gridSizeInput,\n    fpsInput,\n    patternInput,\n    customPatternInput,\n    currentGridRef,\n    setOdds,\n    setGridSize,\n    setCellSize,\n    setFps,\n    setPattern,\n    setCustomPattern,\n    toggleAnimation,\n    isAnimating,\n    drawGrid,\n  } = React.useContext(GameContext)\n\n  const newGame = React.useCallback(\n    (newGridSize?: number) => {\n      setPattern(patternInput)\n      setCustomPattern(customPatternInput)\n      setOdds(oddsInput)\n      setGridSize(newGridSize ?? gridSizeInput)\n      setCellSize(cellSizeInput)\n      setFps(fpsInput)\n\n      if (isAnimating) {\n        toggleAnimation()\n      }\n\n      currentGridRef.current = createNewGrid({\n        customPattern: customPatternInput,\n        gridSize: newGridSize ?? gridSizeInput,\n        odds: oddsInput,\n        pattern: patternInput,\n      })\n\n      drawGrid({\n        cellSize: cellSizeInput,\n        gridSize: newGridSize ?? gridSizeInput,\n      })\n    },\n    [\n      setPattern,\n      patternInput,\n      setCustomPattern,\n      customPatternInput,\n      setOdds,\n      oddsInput,\n      setGridSize,\n      gridSizeInput,\n      setCellSize,\n      cellSizeInput,\n      setFps,\n      fpsInput,\n      isAnimating,\n      currentGridRef,\n      drawGrid,\n      toggleAnimation,\n    ]\n  )\n\n  return newGame\n}\n","import * as React from \"react\"\n\nexport const About: React.FC = () => {\n  return (\n    <>\n      <h2>What is this?</h2>\n      <p>\n        <a\n          href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n          target=\"blank\"\n        >\n          Conway&apos;s Game of Life on Wikipedia\n        </a>\n      </p>\n\n      <h2>How do I use it?</h2>\n      <p>\n        In the first box, you select the starting pattern.\n        <br />\n        You can choose a random pattern, a preset pattern, or a saved pattern\n        (copied after clicking the &apos;Save grid&apos; button).\n        <br />\n        For preset patterns, click &apos;Pattern info&apos; to learn more about\n        that category of pattern.\n      </p>\n      <p>\n        In the second box, you select the size of the grid in cells, & the size\n        of the cells in pixels.\n        <br />\n        The lock checkbox restricts those two inputs, such that the resulting\n        size of the grid in pixels will not change.\n      </p>\n      <p>\n        In the third box, you select how fast the game should try to run.\n        <br />\n        The actual speed will be limited by how quickly your device can\n        calculate & draw the game, as well as the screen&apos;s refresh rate.\n      </p>\n      <p>Using the buttons, you can:</p>\n      <ul>\n        <li>Play/pause the game</li>\n        <li>Update the cell size & refresh rate</li>\n        <li>Start a new game</li>\n        <li>\n          Save the current state of the game. The resulting text can then be\n          pasted in the first box, after selecting &apos;Load saved grid&apos;\n        </li>\n      </ul>\n      <p>\n        By clicking on the cells in the grid, you can flip their state between\n        live & dead. This can be done while paused, or while the game is\n        running.\n      </p>\n\n      <h2>How was it made?</h2>\n      <p>\n        I originally made this in LÖVE, a 2d game engine that uses Lua as its\n        scripting language.\n      </p>\n      <p>\n        Unlike in HTML, user inputs had to be made entirely from scratch in\n        LÖVE, & I wanted to minimise use of other peoples&apos; code. So rather\n        than writing them or using a component library, I restarted in React.\n      </p>\n      <p>\n        Writing the game logic took longer, since React isn&apos;t designed for\n        a game loop like LÖVE is, but the negatives there were outweighed by\n        improved UI appearance & development speed, as well as a web-based app\n        not requiring the user to download & run an executable.\n      </p>\n\n      <p>\n        <a href=\"https://github.com/James-Benson/game-of-life\" target=\"blank\">\n          Project source code on Github\n        </a>\n      </p>\n      <p>\n        <a href=\"game-of-life-windows64.zip\">LÖVE version Windows executable</a>\n      </p>\n      <p>\n        This has only been tested on Windows 10, but to run the executable on\n        any OS supported by LÖVE,{\" \"}\n        <a href=\"https://love2d.org/\" target=\"blank\">\n          install the appropriate version of LÖVE\n        </a>\n        , then run <a href=\"game-of-life.love\">game-of-life.love</a>\n      </p>\n    </>\n  )\n}\n","import * as React from \"react\"\nimport { GameContext } from \"../gameContext\"\nimport { About } from \"./About\"\nimport { Dialog } from \"./Dialog\"\n\nexport const AboutPrompt: React.FC = () => {\n  const { pauseFirst } = React.useContext(GameContext)\n\n  const [showPrompt, setShowPrompt] = React.useState(\n    localStorage.getItem(\"promptShown\") !== \"true\"\n  )\n\n  const [showAboutDialog, setShowAboutDialog] = React.useState(false)\n\n  const hidePrompt = React.useCallback(() => {\n    localStorage.setItem(\"promptShown\", \"true\")\n    setShowPrompt(false)\n  }, [])\n\n  const open = React.useCallback(() => {\n    hidePrompt()\n    pauseFirst(() => setShowAboutDialog(true))\n  }, [hidePrompt, pauseFirst])\n\n  return (\n    <>\n      <Dialog\n        closeDialog={() => setShowAboutDialog(false)}\n        showDialog={showAboutDialog}\n      >\n        <About />\n      </Dialog>\n      <div\n        className={`about-button-wrapper ${showPrompt ? \"show-prompt\" : \"\"}`}\n      >\n        <button className=\"about-button\" onClick={open}>\n          About\n        </button>\n      </div>\n      {showPrompt && (\n        <div onClick={hidePrompt} className=\"prompt-background\">\n          <div className=\"prompt\">\n            I&apos;d recommend reading the first two sections of this before\n            starting. <br />\n            Tap anywhere to close\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n","import * as React from \"react\"\nimport { GameContext } from \"../gameContext\"\n\nimport { useInputControl } from \"../hooks/useInputControl\"\nimport { Marker } from \"./Marker\"\n\nexport const SizeSelector: React.FC = () => {\n  const {\n    cellSizeInputControl,\n    cellSizeInput,\n    setCellSizeInput,\n    gridSizeInputControl,\n    gridSizeInput,\n    setGridSizeInput,\n    gridSize,\n    cellSize,\n  } = React.useContext(GameContext)\n\n  const [lockGridSizeInputControl, gridLockSizeInput] = useInputControl(false)\n  const [gridPixelSize, setGridPixelSize] = React.useState(\n    gridSizeInput * cellSizeInput\n  )\n\n  const gridPixelSizeFactors = React.useMemo(() => {\n    if (gridLockSizeInput) {\n      const factors: number[] = [1]\n      for (let factor = 2; factor <= gridPixelSize / 2; factor++) {\n        if (Number.isInteger(gridPixelSize / factor)) {\n          factors.unshift(factor)\n        }\n      }\n      factors.unshift(gridPixelSize)\n      return factors\n    }\n  }, [gridLockSizeInput, gridPixelSize])\n\n  // When gridSizeInput or cellSizeInput change, change the other such that their product is the original grid size in pixels\n  React.useEffect(() => {\n    if (gridLockSizeInput) {\n      const newCellSize = gridPixelSize / gridSizeInput\n      setCellSizeInput(newCellSize)\n      setGridPixelSize(newCellSize * gridSizeInput)\n    } else {\n      setGridPixelSize(gridSizeInput * cellSizeInput)\n    }\n  }, [gridSizeInput])\n  React.useEffect(() => {\n    if (gridLockSizeInput) {\n      const newGridSize = gridPixelSize / cellSizeInput\n      setGridSizeInput(newGridSize)\n      setGridPixelSize(newGridSize * cellSizeInput)\n    } else {\n      setGridPixelSize(gridSizeInput * cellSizeInput)\n    }\n  }, [cellSizeInput])\n\n  return (\n    <>\n      <label htmlFor=\"gridSize\">Width/height of grid in cells</label>\n      {gridLockSizeInput ? (\n        <select id=\"gridSize\" {...gridSizeInputControl}>\n          {gridPixelSizeFactors?.map(factor => (\n            <option key={`grid${factor}`} value={factor}>\n              {factor}\n            </option>\n          ))}\n        </select>\n      ) : (\n        <input type=\"number\" id=\"gridSize\" {...gridSizeInputControl} />\n      )}\n      <Marker show={gridSizeInput !== gridSize} symbol=\"*\" />\n\n      <label htmlFor=\"cellSize\">Width/height of cells in pixels</label>\n      {gridLockSizeInput ? (\n        <select id=\"cellSize\" {...cellSizeInputControl}>\n          {gridPixelSizeFactors?.map(factor => (\n            <option key={`cell${factor}`} value={factor}>\n              {factor}\n            </option>\n          ))}\n        </select>\n      ) : (\n        <input type=\"number\" id=\"cellSize\" {...cellSizeInputControl} />\n      )}\n      <Marker show={cellSizeInput !== cellSize} symbol=\"†\" />\n\n      <label htmlFor=\"lockGridSize\">Lock resulting grid size</label>\n      <input type=\"checkbox\" id=\"lockGridSize\" {...lockGridSizeInputControl} />\n    </>\n  )\n}\n","import * as React from \"react\"\nimport { GameContext } from \"../gameContext\"\nimport { cloneGrid } from \"../utils\"\n\n/** Flip state of cell when clicking on it */\nexport function useToggleCell(): (\n  e: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n) => void {\n  const { canvasRef, currentGridRef, cellSize, tempPause, drawGrid } =\n    React.useContext(GameContext)\n\n  const toggleCell = React.useCallback(\n    (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n      if (canvasRef.current) {\n        const canvasRect = canvasRef.current.getBoundingClientRect()\n        const x = Math.floor((e.clientX - canvasRect.x) / cellSize)\n        const y = Math.floor((e.clientY - canvasRect.y) / cellSize)\n        tempPause()\n        const newGrid = cloneGrid(currentGridRef.current)\n        newGrid[x][y] = !currentGridRef.current[x][y]\n        currentGridRef.current = newGrid\n        drawGrid()\n      }\n    },\n    [canvasRef, cellSize, tempPause, currentGridRef, drawGrid]\n  )\n\n  return toggleCell\n}\n","import * as React from \"react\"\nimport { GameContext } from \"../gameContext\"\n\n/** Returns warning message if grid is too small for pattern, too big to fit on screen, or too big to fit on screen alongside controls */\nexport const SizeWarning: React.FC = () => {\n  const {\n    canvasRef,\n    screenWidth,\n    screenHeight,\n    gridSizeInput,\n    patternSize,\n    predictedSize,\n  } = React.useContext(GameContext)\n\n  const controlsHeight = React.useMemo(\n    () => canvasRef.current?.getBoundingClientRect().y,\n    [canvasRef.current, screenHeight, screenWidth]\n  )\n\n  if (controlsHeight) {\n    if (patternSize && gridSizeInput < patternSize) {\n      return (\n        <p>\n          Resulting grid too small for pattern. <br />\n          Recommended min grid size:\n          <br />\n          {patternSize}*{patternSize}&nbsp;cells\n        </p>\n      )\n    }\n    if (predictedSize > Math.min(screenWidth, screenHeight)) {\n      return (\n        <p>\n          Resulting grid won&apos;t fit screen.\n          <br />\n          Recommended max grid size:\n          <br />\n          {screenWidth}*{screenHeight}&nbsp;pixels\n        </p>\n      )\n    }\n    if (predictedSize > Math.min(screenWidth, screenHeight - controlsHeight)) {\n      return (\n        <p>\n          Controls & resulting grid won&apos;t fit screen.\n          <br />\n          Recommended max grid size:\n          <br />\n          {screenWidth}*{screenHeight - controlsHeight}&nbsp;pixels\n        </p>\n      )\n    }\n  }\n\n  return null\n}\n","import * as React from \"react\"\nimport { GameContext } from \"../gameContext\"\nimport { useCopyElementText } from \"../hooks/useCopyElementText\"\nimport { compressGrid } from \"../utils\"\n\nexport const SavedGrid: React.FC = () => {\n  const { currentGridRef } = React.useContext(GameContext)\n\n  const [savedGridElementRef, copySavedGrid] =\n    useCopyElementText<HTMLParagraphElement>()\n\n  const compressedGrid = React.useMemo(\n    () => compressGrid(currentGridRef.current),\n    [currentGridRef]\n  )\n\n  return (\n    <>\n      <p>\n        Copy the below text, select &apos;Load Saved Grid&apos; in the pattern\n        dropdown, & paste into the input\n      </p>\n      <button onClick={copySavedGrid}>Copy pattern</button>\n      <input type=\"text\" hidden defaultValue={compressedGrid} />\n      <p ref={savedGridElementRef}>{compressedGrid}</p>\n    </>\n  )\n}\n","import * as React from \"react\"\n\n/** copyElementText copies text of elementRef  */\nexport function useCopyElementText<T extends HTMLElement>(): [\n  React.MutableRefObject<T | null>,\n  () => void\n] {\n  const elementRef = React.useRef<T>(null)\n\n  const copyElementText = React.useCallback(() => {\n    if (elementRef.current?.innerText) {\n      void navigator.clipboard.writeText(elementRef.current.innerText)\n    }\n  }, [elementRef])\n\n  return [elementRef, copyElementText]\n}\n","import * as React from \"react\"\n\nimport { PatternSelector } from \"./components/PatternSelector\"\nimport { useStartingGrid } from \"./hooks/useStartingGrid\"\nimport { useUpdateGame } from \"./hooks/useUpdateGame\"\nimport { useNewGame } from \"./hooks/useNewGame\"\nimport { Marker } from \"./components/Marker\"\nimport { AboutPrompt } from \"./components/AboutPrompt\"\nimport { SizeSelector } from \"./components/SizeSelector\"\nimport { GameContext } from \"./gameContext\"\nimport { useToggleCell } from \"./hooks/useToggleCell\"\nimport { SizeWarning } from \"./components/SizeWarning\"\nimport { Dialog } from \"./components/Dialog\"\nimport { SavedGrid } from \"./components/SavedGrid\"\n\nfunction App(): JSX.Element {\n  const {\n    canvasRef,\n    setCanvasContext,\n    fpsInputControl,\n    fpsInput,\n    gridSize,\n    cellSize,\n    fps,\n    predictedSize,\n    toggleAnimation,\n    isAnimating,\n    pauseFirst,\n  } = React.useContext(GameContext)\n\n  // Canvas properties\n  const createCanvasContext = React.useCallback(\n    (node: HTMLCanvasElement) => {\n      canvasRef.current = node\n      setCanvasContext(node?.getContext(\"2d\") || undefined)\n    },\n    [canvasRef, setCanvasContext]\n  )\n\n  /** Creates new game based on inputs */\n  const newGame = useNewGame()\n\n  /** Updates current game with cell size & fps from inputs */\n  const updateGame = useUpdateGame()\n\n  // Create starting grid on app load\n  useStartingGrid()\n\n  /** Flip state of cell when clicking on it */\n  const toggleCell = useToggleCell()\n\n  // Dialog controls\n  const [showSavedGridDialog, setShowSavedGridDialog] = React.useState(false)\n  const openSavedGridDialog = React.useCallback(() => {\n    pauseFirst(() => setShowSavedGridDialog(true))\n  }, [pauseFirst])\n\n  return (\n    <>\n      <Dialog\n        closeDialog={() => setShowSavedGridDialog(false)}\n        showDialog={showSavedGridDialog}\n      >\n        <SavedGrid />\n      </Dialog>\n\n      <div className=\"container\">\n        <AboutPrompt />\n        <div className=\"flex-container\">\n          <div className=\"flex-col\">\n            <div className=\"control-container\">\n              <PatternSelector />\n            </div>\n\n            <div className=\"control-container\">\n              <SizeSelector />\n            </div>\n\n            <div className=\"control-container\">\n              <label htmlFor=\"fps\">Cycles per second</label>\n              <input type=\"number\" id=\"fps\" {...fpsInputControl} />\n              <Marker show={fpsInput !== fps} symbol=\"†\" />\n            </div>\n          </div>\n\n          <div className=\"flex-col\">\n            <p>\n              <strong>*</strong>Start new game to apply\n            </p>\n            <p>\n              <strong>†</strong>Update/start new game to apply\n            </p>\n            <p>\n              Resulting grid size:\n              <br />\n              {predictedSize}*{predictedSize}&nbsp;pixels\n            </p>\n            <SizeWarning />\n          </div>\n        </div>\n\n        <div className=\"buttons-container\">\n          <button\n            className=\"play-pause-button\"\n            onClick={() => toggleAnimation()}\n          >\n            {isAnimating ? \"⏸️ Pause\" : \"▶️ Play\"}\n          </button>\n          <button onClick={updateGame}>Update</button>\n          <button onClick={() => newGame()}>New game</button>\n          <button onClick={openSavedGridDialog}>Save</button>\n        </div>\n\n        <canvas\n          ref={createCanvasContext}\n          onClick={e => toggleCell(e)}\n          width={gridSize * cellSize}\n          height={gridSize * cellSize}\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import * as React from \"react\"\nimport { GameContext } from \"../gameContext\"\n\n/** Updates current game with cell size & fps from inputs */\nexport function useUpdateGame(): () => void {\n  const {\n    cellSizeInput,\n    gridSizeInput,\n    fpsInput,\n    setCellSize,\n    setFps,\n    tempPause,\n    drawGrid,\n  } = React.useContext(GameContext)\n\n  const updateGame = React.useCallback(() => {\n    tempPause()\n    setCellSize(cellSizeInput)\n    setFps(fpsInput)\n    drawGrid({ cellSize: cellSizeInput, gridSize: gridSizeInput })\n  }, [\n    tempPause,\n    setCellSize,\n    cellSizeInput,\n    setFps,\n    fpsInput,\n    drawGrid,\n    gridSizeInput,\n  ])\n\n  return updateGame\n}\n","import * as React from \"react\"\nimport { GameContext } from \"../gameContext\"\nimport { useNewGame } from \"./useNewGame\"\n\n/** Creates starting grid on app load */\nexport function useStartingGrid(): void {\n  const {\n    canvasRef,\n    canvasContext,\n    screenWidth,\n    screenHeight,\n    cellSizeInput,\n    setGridSizeInput,\n  } = React.useContext(GameContext)\n\n  const newGame = useNewGame()\n\n  React.useEffect(() => {\n    if (canvasRef.current && canvasContext) {\n      const controlsHeight = canvasRef.current.getBoundingClientRect().y\n      const viewMin = Math.min(screenWidth, screenHeight - controlsHeight)\n      const newGridSize = Math.floor(viewMin / cellSizeInput)\n      setGridSizeInput(newGridSize)\n      newGame(newGridSize)\n    }\n  }, [canvasRef.current, canvasContext])\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/.exec(\n      window.location.hostname\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready\n          .then(() => {\n            console.log(\n              \"This web app is being served cache-first by a service \" +\n                \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n            )\n          })\n          .catch((error: Error) => console.log(console.log(error.message)))\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready\n          .then(registration => {\n            registration\n              .unregister()\n              .then(() => {\n                window.location.reload()\n              })\n              .catch((error: Error) => console.log(console.log(error.message)))\n          })\n          .catch((error: Error) => console.log(console.log(error.message)))\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister(): void {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration\n          .unregister()\n          .catch((error: Error) => console.log(console.log(error.message)))\n      })\n      .catch((error: Error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./styles/index.scss\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { GameContextProvider } from \"./gameContext\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameContextProvider>\n      <App />\n    </GameContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}