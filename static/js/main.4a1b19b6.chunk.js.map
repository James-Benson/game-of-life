{"version":3,"sources":["hooks/useNewState.tsx","hooks/useInputControl.tsx","utils.ts","components/Marker.tsx","components/PatternSelector.tsx","components/AboutPrompt.tsx","components/About.tsx","components/SizeSelector.tsx","App.tsx","hooks/useWindowSize.tsx","hooks/useAnimationFrame.tsx","hooks/useDialog.tsx","hooks/useCopyElementText.tsx","hooks/useNewGame.tsx","hooks/useUpdateGame.tsx","hooks/useStartingGrid.tsx","serviceWorker.ts","index.tsx"],"names":["useNewState","initialState","React","state","setState","stateDep","setStateDep","setNewState","newState","useInputControl","value","toString","onChange","e","parseInt","target","Math","max","checked","console","log","changeGridSize","grid","size","sizeDiff","length","slice","map","row","forEach","push","Array","fill","compressGrid","flatGrid","flat","compressed","counter","currentCell","cell","join","decompressGrid","split","shift","decompressed","count","decompressCells","patternList","name","description","patterns","Marker","props","style","visibility","show","symbol","PatternSelector","patternContol","patternInput","setPatternInput","oddsInputControl","oddsInput","setOddsInput","customPatternControl","customPatternInput","setCustomPatternInput","info","patternSize","htmlFor","type","id","odds","customPattern","onClick","openPatternInfoDialog","disabled","category","key","Object","entries","pattern","AboutPrompt","localStorage","getItem","showPrompt","setShowPrompt","hidePrompt","setItem","open","openAboutDialog","className","About","href","SizeSelector","gridLockSizeInput","setLockGridSizeInput","gridSizeInput","cellSizeInput","gridPixelSize","setGridPixelSize","gridPixelSizeFactors","factors","factor","Number","isInteger","unshift","newCellSize","setCellSizeInput","newGridSize","setGridSizeInput","gridSizeControl","cellSizeControl","lockGridSizeControl","gridSize","cellSize","App","canvasRef","canvasContext","setCanvasContext","createCanvasContext","node","current","getContext","undefined","delay","screenWidth","window","innerWidth","screenHeight","innerHeight","screenSize","setScreenSize","isPC","testString","navigator","userAgent","vendor","test","substr","timer","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","useWindowSize","fpsInput","setFpsInput","predictedSize","currentGrid","setCurrentGrid","oddsDep","setOdds","gridSizeDep","setGridSize","setCellSize","fps","setFps","setPattern","setCustomPattern","callback","animationRef","prevTimeRef","countRef","isAnimating","setIsAnimating","reanimate","setReanimate","animate","time","deltaTime","requestAnimationFrame","toggleAnimation","cancelAnimationFrame","prev","tempPause","useAnimationFrame","prevGrid","newGrid","updateGrid","drawGrid","content","setContent","dialogOpen","setDialogOpen","useDialog","Dialog","openDialog","elementRef","copyElementText","innerText","clipboard","writeText","useCopyElementText","savedGridElementRef","copySavedGrid","openSaveGridDialog","hidden","defaultValue","ref","filter","values","includes","createRandomGrid","x","y","random","createNewGrid","sum","i","j","clearRect","fillRect","newGame","useNewGame","updateGame","useUpdateGame","newSim","controlsHeight","getBoundingClientRect","viewMin","min","floor","useStartingGrid","toggleCell","canvasRect","clientX","clientY","sizeWarning","width","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a1b19b6.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport type TDep<T> = [T, boolean]\n\n/** When calling setNewState, hooks dependant on stateDep will be re-evaluated, even if state does not change */\nexport function useNewState<T>(initialState: T): [T, TDep<T>, (newState: T) => void] {\n  const [state, setState] = React.useState<T>(initialState)\n  const [stateDep, setStateDep] = React.useState<TDep<T>>([initialState, false])\n\n  const setNewState = React.useCallback((newState: T) => {\n    setStateDep([newState, !stateDep?.[1]])\n    setState(newState)\n  }, [stateDep])\n\n  return [state, stateDep, setNewState]\n}","import * as React from 'react'\n\ninterface IInputControls {\n  onChange: (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void\n  value: any\n}\n\n/**\n * Returns object to spread onto input to control it\n * @param state Determines value of input\n * @param setState Called when input changes\n */\nexport function useInputControl(state: any, setState: React.Dispatch<React.SetStateAction<any>>): IInputControls {\n  const value = React.useMemo(() => (\n    typeof state === 'number' ? state.toString() : state\n  ), [state])\n\n  const onChange = React.useCallback(e => {\n    switch (typeof state) {\n      case 'number':\n        const value = parseInt(e.target.value) || 0\n        setState(Math.max(value, 0))\n        break\n      case 'boolean':\n        setState(e.target.checked)\n        break\n      case 'string':\n        setState(e.target.value)\n        break\n      default:\n        console.log('Unsupported input type')\n    }\n  }, [state, setState])\n\n  return { onChange, value }\n}\n","export interface IPatternCategory {\n  name: string\n  description: string\n  patterns: Record<string, string>\n}\n\n/** Length of external array & lengths of internal arrays should be equal */\nexport type TGrid = boolean[][]\n\n/**\n * Deep copies TGrid\n * @param grid TGrid to be cloned\n */\nexport const cloneGrid = (grid: TGrid): TGrid => grid.map((row) => [...row])\n\n/**\n * Increases/decreases length of external & internal arrays of TGrid to specified length\n * If increasing, pads with false\n * @param grid TGrid to be modified\n * @param size Width/height of new TGrid\n */\nexport const changeGridSize = (grid: TGrid, size: number): TGrid => {\n  const sizeDiff = size - grid.length\n  if (sizeDiff < 0) {\n    grid = grid.slice(0, sizeDiff)\n    grid = grid.map(row => row.slice(0, sizeDiff))\n  } else if (sizeDiff > 0) {\n    grid.forEach(row => {\n      row.push(...Array(sizeDiff).fill(false))\n    })\n    grid.push(...Array(sizeDiff).fill(Array(size).fill(false)))\n  }\n  return grid\n}\n\n/**\n * Returns string of comma separated numbers representing TGrid\n * Flattens TGrid into boolean array, then replaces each run of the same boolean with the length of the run\n * Format: [TGrid width/height, (number of consecutive falses, number of consecutive trues)...]\n * @param grid TGrid to be compressed\n */\nexport const compressGrid = (grid: TGrid): string => {\n  const flatGrid = grid.flat()\n  const compressed = [grid.length]\n  let counter = 0 // Number of consecutive same booleans\n  let currentCell = false // Boolean in current consecutive run\n  flatGrid.forEach(cell => {\n    if (cell === currentCell) {\n      counter++\n    } else {\n      compressed.push(counter)\n      counter = 1\n      currentCell = !currentCell\n    }\n  })\n  compressed.push(counter)\n  return compressed.join(',')\n}\n\n/**\n * Reverses compressGrid()\n * @param grid string of comma separated numbers, compressed grid from compressGrid()\n */\nexport const decompressGrid = (grid: string): TGrid => {\n  const compressed: number[] = grid.split(',').map(cell => parseInt(cell))\n  const size = compressed.shift() as number // Width/height of resultant grid\n  let decompressed: TGrid = [] // Resulting decompressed grid\n  let row = 0 // Index of decompressed grid currently being added to\n  let counter = size // Number of spaces left of current row\n  let currentCell = false // Boolean to be added to grid\n  compressed.forEach(count => { // Count is current number of consecutive same booleans\n    [decompressed, row, counter, currentCell] = decompressCells(size, decompressed, row, counter, currentCell, count)\n  })\n  return decompressed.slice(0, -1)\n}\n\n\n/**\n * Adds current count of booleans to current row, creating new row if current row fills up\n * @param size Width/height of resultant grid\n * @param decompressed Resulting decompressed grid\n * @param row ndex of decompressed grid currently being added to\n * @param counter Number of spaces left of current row\n * @param currentCell Boolean to be added to grid\n * @param count Remaining number of booleans to be added to grid\n */\nconst decompressCells = (size: number, decompressed: TGrid, row: number, counter: number, currentCell: boolean, count: number):\n  [TGrid, number, number, boolean] => {\n  decompressed[row] = decompressed[row] ?? []\n  if (row < size) {\n    if (count < counter) {\n      decompressed[row].push(...Array(count).fill(currentCell))\n      currentCell = !currentCell\n      counter -= count\n    } else {\n      decompressed[row].push(...Array(counter).fill(currentCell))\n      count -= counter\n      counter = size\n      row++\n      [decompressed, row, counter, currentCell] = decompressCells(size, decompressed, row, counter, currentCell, count)\n    }\n  }\n  return [decompressed, row, counter, currentCell]\n}\n\nexport const copyText = (input: React.RefObject<HTMLInputElement>) => {\n  if (!input.current) return\n  navigator.clipboard.writeText('aaa')\n  // input.current.select()\n  // input.current.setSelectionRange(0, 99999)\n  // document.execCommand(\"copy\")\n}\n\nexport const patternList: IPatternCategory[] = [\n  {\n    name: 'Still lifes',\n    description: 'A still life is a pattern that does not change from one generation to the next.',\n    patterns: {\n      'Block, Beehive, Loaf, Boat, Tub': '15,16,2,2,2,9,2,2,1,1,1,13,1,25,1,13,1,1,1,12,1,1,1,13,1,3,1,13,1,1,1,9,1,3,1,9,1,1,1,12,1,2,1,12,2,26'\n    }\n  },\n  {\n    name: 'Oscillators',\n    description: 'An oscillator is a pattern that returns to its original state after a certain number of generations (shown in brackets).',\n    patterns: {\n      'Blinker, Toad, Beacon (2)': '10,11,1,9,1,9,1,3,2,8,2,5,1,4,2,2,2,4,2,2,2,8,1,18',\n      'Pulsar, Star, Cross (3)': '28,31,3,3,3,45,1,4,1,1,1,4,1,15,1,4,1,1,1,4,1,15,1,4,1,1,1,4,1,17,3,3,3,47,3,3,3,17,1,4,1,1,1,4,1,15,1,4,1,1,1,4,1,6,4,5,1,4,1,1,1,4,1,6,1,2,1,22,3,2,3,5,3,3,3,6,1,6,1,20,1,6,1,20,3,2,3,9,1,12,1,2,1,10,3,11,4,8,3,1,3,21,1,5,1,20,2,5,2,18,2,7,2,18,2,5,2,20,1,5,1,21,3,1,3,23,3,26,1,48',\n      'Clock (4)': '12,4,2,10,2,22,4,7,1,4,1,1,2,3,1,1,2,1,1,1,4,1,2,3,1,3,2,1,1,4,1,7,4,22,2,10,2,4',\n      'Octagon (5)': '8,3,2,5,1,2,1,3,1,4,1,1,1,6,2,6,1,1,1,4,1,3,1,2,1,5,2,3',\n      'Kok\\'s galaxy (8)': '13,28,6,1,2,4,6,1,2,11,2,4,2,5,2,4,2,5,2,4,2,5,2,4,2,11,2,1,6,4,2,1,6,28',\n      'Pentadecathlon (15)': '17,124,1,4,1,9,2,1,4,1,2,9,1,4,1,125'\n    }\n  },\n  {\n    name: 'Spaceships',\n    description: 'A spaceship is a pattern that returns to its original state in a different position after a certain number of generations (shown in brackets).',\n    patterns: {\n      'Glider (4)': '20,2,1,17,1,1,1,18,2,357',\n      'Light-weight spaceship (4)': '20,0,1,1,1,20,1,19,1,16,1,2,1,17,3,316',\n      'Medium-weight spaceship (4)': '20,1,1,1,1,20,1,15,1,3,1,19,1,16,1,2,1,17,3,295',\n      'Heavy-weight spaceship (4)': '20,1,1,1,1,20,1,15,1,3,1,15,1,3,1,19,1,16,1,2,1,17,3,275'\n    }\n  },\n  {\n    name: 'Methuselahs',\n    description: 'A methuselah is a small pattern that stabilises after a large number of generations (shown in brackets).',\n    patterns: {\n      'R-pentomino (1103)': '130,9416,1,129,3,128,1,7222',\n      'Diehard (130)': '30,309,1,29,2,119,1,27,1,1,1,29,1,379',\n      'Acorn (5206)': '240,36385,1,237,1,1,1,478,1,240,1,239,1,239,1,19774'\n    }\n  },\n  {\n    name: 'Guns',\n    description: 'A gun is a pattern that returns to its original state after a certain number of generations, while launching spaceships.',\n    patterns: {\n      'Gosper glider gun': '36,7,2,34,2,322,3,32,1,3,1,30,1,5,1,29,1,5,1,32,1,33,1,3,1,32,3,34,1,104,3,33,3,32,1,3,1,66,2,3,2,355,2,34,2,29'\n    }\n  }\n]\n","import * as React from 'react'\n\ninterface IMarkerProps {\n  symbol: string\n  show: boolean\n}\n\nexport const Marker: React.FC<IMarkerProps> = props => {\n  return (\n    <strong\n      style={{ visibility: (props.show ? 'visible' : 'hidden') }}\n    >\n      {props.symbol}\n    </strong>\n  )\n}","import * as React from 'react';\nimport { useInputControl } from '../hooks/useInputControl';\nimport { patternList } from '../utils';\nimport { Marker } from './Marker';\n\ninterface IPatternSelector {\n  pattern: string\n  patternInput: string\n  setPatternInput: React.Dispatch<React.SetStateAction<string>>\n  customPattern: string\n  customPatternInput: string\n  setCustomPatternInput: React.Dispatch<React.SetStateAction<string>>\n  odds: number\n  oddsInput: number\n  setOddsInput: React.Dispatch<React.SetStateAction<number>>\n  openPatternInfoDialog: () => void\n}\n\nexport const PatternSelector: React.FC<IPatternSelector> = props => {\n  const patternContol = useInputControl(props.patternInput, props.setPatternInput)\n  const oddsInputControl = useInputControl(props.oddsInput, props.setOddsInput)\n  const customPatternControl = useInputControl(props.customPatternInput, props.setCustomPatternInput)\n\n  const info = React.useMemo(() => {\n    let patternSize\n    switch (props.patternInput) {\n      case 'Random':\n        return <>\n          <label htmlFor='odds'>Cells starting live (%)</label>\n          <input type='number' id='odds' {...oddsInputControl} />\n          <Marker show={props.oddsInput !== props.odds} symbol='*' />\n        </>\n      case 'Load':\n        patternSize = parseInt(props.customPatternInput)\n        return <>\n          <label htmlFor='customPattern'>{\n            patternSize ?\n              `Min grid width: ${patternSize} cells`\n              :\n              'Paste saved grid'\n          }</label>\n          <input type='string' id='customPattern' {...customPatternControl} />\n          <Marker show={props.customPatternInput !== props.customPattern} symbol='*' />\n        </>\n      default:\n        patternSize = parseInt(props.patternInput)\n        return <>\n          <span>Min grid width: {patternSize} cells</span>\n          <button onClick={props.openPatternInfoDialog}>\n            Pattern info\n          </button>\n        </>\n    }\n  }, [props, oddsInputControl, customPatternControl])\n\n  return (<>\n    <label htmlFor='pattern'>Choose pattern</label>\n    <select id='pattern' {...patternContol}>\n      {props.patternInput === '' && <option value='' disabled>Select pattern</option>}\n      <option value='Random'>Random</option>\n      <option value='Load'>Load saved grid</option>\n\n      {patternList.map(category => ([\n        <option disabled key={category.name} value={category.name}>~~{category.name}~~</option>,\n        Object.entries(category.patterns).map(([name, pattern]) => <option key={name} value={[pattern]}>{name}</option>)\n      ]))}\n    </select>\n    <Marker show={props.pattern !== props.patternInput} symbol='*' />\n    {info}\n  </>)\n}","import * as React from 'react';\n\ninterface IAboutPromptProps {\n  openAboutDialog: () => void\n}\n\nexport const AboutPrompt: React.FC<IAboutPromptProps> = props => {\n  const [showPrompt, setShowPrompt] = React.useState(localStorage.getItem('promptShown') !== 'true')\n\n  const hidePrompt = React.useCallback(() => {\n    localStorage.setItem('promptShown', 'true')\n    setShowPrompt(false)\n  }, [])\n\n  const open = React.useCallback(() => {\n    hidePrompt()\n    props.openAboutDialog()\n  }, [hidePrompt, props])\n\n  return (\n    <>\n      <div className={`about-button-wrapper ${showPrompt && 'show-prompt'}`}>\n        <button className='about-button' onClick={open}>About</button>\n      </div>\n      {showPrompt && (\n        <div onClick={hidePrompt} className='prompt-background'>\n          <div className='prompt'>\n            I'd recommend reading the first two sections of this before starting. <br />\n            Tap anywhere to close\n          </div>\n        </div>\n      )}\n    </>\n  )\n}","import * as React from 'react';\n\nexport const About: React.FC = () => {\n\n  return <>\n    <h2>What is this?</h2>\n    <p>\n      <a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life' target='blank'>Conway's Game of Life on Wikipedia</a>\n    </p>\n\n    <h2>How do I use it?</h2>\n    <p>\n      In the first box, you select the starting pattern.<br />\n      You can choose a random pattern, a preset pattern, or a saved pattern (copied after clicking the 'Save grid' button).<br />\n      For preset patterns, click 'Pattern info' to learn more about that category of pattern.\n    </p>\n    <p>\n      In the second box, you select the size of the grid in cells, & the size of the cells in pixels.<br />\n      The lock checkbox restricts those two inputs, such that the resulting size of the grid in pixels will not change.\n    </p>\n    <p>\n      In the third box, you select how fast the game should try to run.<br />\n      The actual speed will be limited by how quickly your device can calculate & draw the game, as well as the screen's refresh rate.\n    </p>\n    <p>\n      Using the buttons, you can:\n    </p>\n    <ul>\n      <li>Play/pause the game</li>\n      <li>Update the cell size & refresh rate</li>\n      <li>Start a new game</li>\n      <li>Save the current state of the game. The resulting text can then be pasted in the first box, after selecting 'Load saved grid'</li>\n    </ul>\n    <p>\n      By clicking on the cells in the grid, you can flip their state between live & dead. This can be done while paused, or while the game is running.\n    </p>\n\n    <h2>How was it made?</h2>\n    <p>\n      I originally made this in LÖVE, a 2d game engine that uses Lua as its scripting language.\n    </p>\n    <p>\n      Unlike in HTML, user inputs had to be made entirely from scratch in LÖVE, & I wanted to minimise use of other peoples' code. So rather than writing them or using a component library, I restarted in React.\n    </p>\n    <p>\n      Writing the game logic took longer, since React isn't designed for a game loop like LÖVE is, but the negatives there were outweighed by improved UI appearance & development speed, as well as a web-based app not requiring the user to download & run an executable.\n    </p>\n\n    <p>\n      <a href='https://github.com/James-Benson/game-of-life' target='blank'>Project source code on Github</a>\n    </p>\n    <p>\n      <a href='/game-of-life-windows64.zip'>LÖVE version Windows executable</a>\n    </p>\n    <p>\n      This has only been tested on Windows 10, but to run the executable on any OS supported by LÖVE, <a href='https://love2d.org/' target='blank'>install the appropriate version of LÖVE</a>, then run <a href='game-of-life.love'>game-of-life.love</a>\n    </p>\n  </>\n}","import * as React from 'react';\n\nimport { useInputControl } from '../hooks/useInputControl';\nimport { Marker } from './Marker';\n\ninterface ISizeSelectorProps {\n  gridSize: number\n  gridSizeInput: number\n  setGridSizeInput: React.Dispatch<React.SetStateAction<number>>\n  cellSize: number\n  cellSizeInput: number\n  setCellSizeInput: React.Dispatch<React.SetStateAction<number>>\n}\n\nexport const SizeSelector: React.FC<ISizeSelectorProps> = props => {\n  const [gridLockSizeInput, setLockGridSizeInput] = React.useState(false)\n  const [gridPixelSize, setGridPixelSize] = React.useState(props.gridSizeInput * props.cellSizeInput)\n\n  const gridPixelSizeFactors = React.useMemo(() => {\n    if (gridLockSizeInput) {\n      const factors: number[] = [1]\n      for (let factor = 2; factor <= gridPixelSize / 2; factor++) {\n        if (Number.isInteger(gridPixelSize / factor)) {\n          factors.unshift(factor)\n        }\n      }\n      factors.unshift(gridPixelSize)\n      return factors\n    }\n  }, [gridLockSizeInput, gridPixelSize])\n\n  // When gridSizeInput or cellSizeInput change, change the othe such that their product is the original grid size in pixels\n  React.useEffect(() => {\n    if (gridLockSizeInput) {\n      const newCellSize = gridPixelSize / props.gridSizeInput\n      props.setCellSizeInput(newCellSize)\n      setGridPixelSize(newCellSize * props.gridSizeInput)\n    } else {\n      setGridPixelSize(props.gridSizeInput * props.cellSizeInput)\n    }\n  }, [props.gridSizeInput])\n  React.useEffect(() => {\n    if (gridLockSizeInput) {\n      const newGridSize = gridPixelSize / props.cellSizeInput\n      props.setGridSizeInput(newGridSize)\n      setGridPixelSize(newGridSize * props.cellSizeInput)\n    } else {\n      setGridPixelSize(props.gridSizeInput * props.cellSizeInput)\n    }\n  }, [props.cellSizeInput])\n\n  const gridSizeControl = useInputControl(props.gridSizeInput, props.setGridSizeInput)\n  const cellSizeControl = useInputControl(props.cellSizeInput, props.setCellSizeInput)\n  const lockGridSizeControl = useInputControl(gridLockSizeInput, setLockGridSizeInput)\n\n  return (\n    <>\n      <label htmlFor='gridSize'>Width/height of grid in cells</label>\n      {gridLockSizeInput ?\n        <select id='gridSize' {...gridSizeControl}>\n          {gridPixelSizeFactors?.map(factor => <option key={'grid' + factor} value={factor}>{factor}</option>)}\n        </select>\n        :\n        <input type='number' id='gridSize' {...gridSizeControl} />\n      }\n      <Marker show={props.gridSizeInput !== props.gridSize} symbol='*' />\n\n      <label htmlFor='cellSize'>Width/height of cells in pixels</label>\n      {gridLockSizeInput ?\n        <select id='cellSize' {...cellSizeControl}>\n          {gridPixelSizeFactors?.map(factor => <option key={'cell' + factor} value={factor}>{factor}</option>)}\n        </select>\n        :\n        <input type='number' id='cellSize' {...cellSizeControl} />\n      }\n      <Marker show={props.cellSizeInput !== props.cellSize} symbol='†' />\n\n      <label htmlFor='lockGridSize'>Lock resulting grid size</label>\n      <input type='checkbox' id='lockGridSize' {...lockGridSizeControl} />\n    </>\n  )\n}","import * as React from 'react';\n\nimport { useAnimationFrame } from './hooks/useAnimationFrame';\nimport { useNewState } from './hooks/useNewState';\nimport { useInputControl } from './hooks/useInputControl';\nimport { useWindowSize } from './hooks/useWindowSize';\nimport { useDialog } from './hooks/useDialog';\nimport { PatternSelector } from './components/PatternSelector';\nimport { changeGridSize, cloneGrid, compressGrid, decompressGrid, patternList, TGrid } from './utils';\nimport { useStartingGrid } from './hooks/useStartingGrid';\nimport { useUpdateGame } from './hooks/useUpdateGame';\nimport { useNewGame } from './hooks/useNewGame';\nimport { useCopyElementText } from './hooks/useCopyElementText';\nimport { Marker } from './components/Marker';\nimport { AboutPrompt } from './components/AboutPrompt';\nimport { About } from './components/About';\nimport { SizeSelector } from './components/SizeSelector';\n\nfunction App() {\n  // Canvas properties\n  const canvasRef = React.useRef<HTMLCanvasElement>()\n  const [canvasContext, setCanvasContext] = React.useState<CanvasRenderingContext2D>()\n  const createCanvasContext = React.useCallback((node: HTMLCanvasElement) => {\n    canvasRef.current = node\n    setCanvasContext(node?.getContext('2d') || undefined)\n  }, [])\n\n  // State for checking size of grid relative to size of screen\n  const { screenWidth, screenHeight } = useWindowSize(200)\n\n  // Unapplied grid properties in inputs\n  const [oddsInput, setOddsInput] = React.useState(50)\n  const [cellSizeInput, setCellSizeInput] = React.useState(10)\n  const [gridSizeInput, setGridSizeInput] = React.useState(0)\n  const [fpsInput, setFpsInput] = React.useState(30)\n  const [patternInput, setPatternInput] = React.useState('Random')\n  const [customPatternInput, setCustomPatternInput] = React.useState('')\n\n  // State for checking grid will be smaller than screen\n  const predictedSize = React.useMemo(() => gridSizeInput * cellSizeInput, [gridSizeInput, cellSizeInput])\n\n  // Grid properties\n  const [currentGrid, setCurrentGrid] = React.useState<TGrid>([[]])\n  const [odds, oddsDep, setOdds] = useNewState(0)\n  const [gridSize, gridSizeDep, setGridSize] = useNewState(0)\n  const [cellSize, setCellSize] = React.useState(0)\n  const [fps, setFps] = React.useState(0)\n  const [pattern, setPattern] = React.useState('Random')\n  const [customPattern, setCustomPattern] = React.useState('')\n  const patternSize = React.useMemo(() => {\n    switch (patternInput) {\n      case 'Random':\n        return undefined\n      case 'Load':\n        return parseInt(customPatternInput)\n      default:\n        return parseInt(patternInput)\n    }\n  }, [patternInput, customPatternInput])\n\n  // Handles playing & pausing of game\n  const [toggleAnimation, isAnimating, tempPause] = useAnimationFrame<TGrid>(fps, (prevGrid) => {\n    const newGrid = updateGrid(prevGrid)\n    drawGrid(newGrid)\n    return newGrid\n  })\n\n  // Dialog stuff\n  const [Dialog, openDialog] = useDialog()\n  // Opens dialog containing information about the app\n  const openAboutDialog = React.useCallback(() => {\n    if (isAnimating) toggleAnimation()\n    openDialog(<About />)\n  }, [openDialog, isAnimating, toggleAnimation])\n  // Opens dialog containing compressed grid string\n  const [savedGridElementRef, copySavedGrid] = useCopyElementText()\n  const openSaveGridDialog = React.useCallback(() => {\n    if (isAnimating) toggleAnimation()\n    openDialog(<>\n      <p>Copy the below text, select 'Load Saved Grid' in the pattern dropdown, & paste into the input</p>\n      <button onClick={copySavedGrid}>Copy pattern</button>\n      <input type='text' hidden defaultValue={compressGrid(currentGrid)} />\n      <p ref={savedGridElementRef} >{compressGrid(currentGrid)}</p>\n    </>)\n  }, [openDialog, isAnimating, toggleAnimation, currentGrid, copySavedGrid, savedGridElementRef])\n  // Opens dialog describing pattern category\n  const openPatternInfoDialog = React.useCallback(() => {\n    if (isAnimating) toggleAnimation()\n    openDialog(<>{\n      patternList.filter(category => Object.values(category.patterns).includes(patternInput))[0]?.description\n    }</>)\n  }, [openDialog, isAnimating, toggleAnimation, patternInput])\n\n  /** Returns randomly populated grid based on odds */\n  const createRandomGrid = React.useCallback(() => {\n    const grid: TGrid = []\n    for (let x = 0; x < gridSize; x++) {\n      grid[x] = []\n      for (let y = 0; y < gridSize; y++) {\n        grid[x][y] = Math.random() * 100 < odds\n      }\n    }\n    return grid\n  }, [gridSize, odds])\n\n  /** Returns new grid, type dependant on selected pattern */\n  const createNewGrid = React.useCallback(() => {\n    switch (patternInput) {\n      case 'Random':\n        return createRandomGrid()\n      case 'Load':\n        return changeGridSize(decompressGrid(customPatternInput), gridSize)\n      default:\n        return changeGridSize(decompressGrid(patternInput), gridSize)\n    }\n  }, [patternInput, customPatternInput, createRandomGrid, gridSize])\n\n  /**\n   * Creates new grid based on passed grid (or currentGrid state)\n   * New grid is set as currentGrid, & returned\n   */\n  const updateGrid = React.useCallback((grid?: TGrid) => {\n    // Can use grid state, but can be passed a grid if grid state is not up to date\n    grid = grid ?? currentGrid\n    const newGrid: TGrid = []\n    for (let x = 0; x < gridSize; x++) {\n      newGrid[x] = []\n      for (let y = 0; y < gridSize; y++) {\n        // Count number of live neighbours\n        let sum = 0\n        for (let i = x - 1; i <= x + 1; i++) {\n          for (let j = y - 1; j <= y + 1; j++) {\n            if (\n              (i !== x || j !== y) && // Ignore cell's own value\n              grid[i]?.[j] // Check neighbour is live, and not outside grid\n            ) sum++\n          }\n        }\n        // If cell is live & has 2 live neighbours, or cell has 3 live neighbours, make cell live next cycle\n        newGrid[x][y] = ((grid[x][y] && sum === 2) || sum === 3)\n      }\n    }\n    setCurrentGrid(newGrid)\n    return newGrid\n  }, [currentGrid, gridSize])\n\n  /** Draws passed grid (or currentGrid) onto canvas */\n  const drawGrid = React.useCallback((grid?: TGrid) => {\n    // Can use grid state, but can be passed a grid if grid state is not up to date\n    grid = grid ?? currentGrid\n    if (!(canvasContext && grid?.[gridSize - 1])) return\n    canvasContext.clearRect(0, 0, gridSize * cellSize, gridSize * cellSize)\n    for (let x = 0; x < gridSize; x++) {\n      for (let y = 0; y < gridSize; y++) {\n        grid[x][y] && canvasContext.fillRect(x * cellSize, y * cellSize, cellSize, cellSize)\n      }\n    }\n  }, [canvasContext, gridSize, cellSize, currentGrid])\n\n\n  /** Creates new game based on inputs */\n  const newGame = useNewGame(\n    patternInput, setPattern,\n    customPatternInput, setCustomPattern,\n    oddsInput, setOdds, oddsDep,\n    gridSizeInput, setGridSize, gridSizeDep,\n    cellSizeInput, setCellSize,\n    fpsInput, setFps,\n    isAnimating,\n    toggleAnimation,\n    createNewGrid,\n    setCurrentGrid,\n    drawGrid\n  )\n\n  /** Updates current game with cell size & fps from inputs */\n  const updateGame = useUpdateGame(\n    cellSize, setCellSize, cellSizeInput,\n    fps, setFps, fpsInput,\n    tempPause,\n    drawGrid\n  )\n\n  // Create starting grid on app load\n  useStartingGrid(\n    canvasRef,\n    gridSizeInput,\n    screenWidth,\n    screenHeight,\n    cellSizeInput,\n    currentGrid,\n    newGame,\n    setGridSizeInput\n  )\n\n  /** Flip state of cell when clicking on it */\n  const toggleCell = React.useCallback((e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (!canvasRef.current || !currentGrid) return\n    const canvasRect = canvasRef.current.getBoundingClientRect()\n    const x = Math.floor((e.clientX - canvasRect.x) / cellSize)\n    const y = Math.floor((e.clientY - canvasRect.y) / cellSize)\n    tempPause()\n    const newGrid = cloneGrid(currentGrid)\n    newGrid[x][y] = !currentGrid[x][y]\n    setCurrentGrid(newGrid)\n    drawGrid(newGrid)\n  }, [cellSize, canvasRef, currentGrid, drawGrid, tempPause])\n\n  /** Returns warning message if grid is too small for pattern, too big to fit on screen, or too big to fit on screen alongside controls */\n  const sizeWarning = React.useMemo(() => {\n    if (!canvasRef.current) return\n    const controlsHeight = canvasRef.current.getBoundingClientRect().y\n\n    if (patternSize && gridSizeInput < patternSize) {\n      return <p>\n        Resulting grid too small for pattern. <br />\n        Recommended min grid size:<br />\n        {patternSize}*{patternSize}&nbsp;cells\n      </p>\n    } else if (predictedSize > Math.min(screenWidth, screenHeight)) {\n      return <p>\n        Resulting grid won't fit screen.<br />\n        Recommended max grid size:<br />\n        {screenWidth}*{screenHeight}&nbsp;pixels\n      </p>\n    } else if (predictedSize > Math.min(screenWidth, screenHeight - controlsHeight)) {\n      return <p>\n        Controls & resulting grid won't fit screen.<br />\n        Recommended max grid size:<br />\n        {screenWidth}*{screenHeight - controlsHeight}&nbsp;pixels\n      </p>\n    } else return\n  }, [canvasRef, screenWidth, screenHeight, predictedSize, gridSizeInput, patternSize])\n\n  return (<>\n    <Dialog />\n    <div className='container'>\n      <AboutPrompt {...{ openAboutDialog }} />\n      <div className='flex-container'>\n        <div className='flex-col'>\n          <div className='control-container'>\n            <PatternSelector {...{\n              pattern, patternInput, setPatternInput,\n              customPattern, customPatternInput, setCustomPatternInput,\n              odds, oddsInput, setOddsInput,\n              openPatternInfoDialog\n            }} />\n          </div>\n\n          <div className='control-container'>\n            <SizeSelector {...{\n              gridSize, gridSizeInput, setGridSizeInput,\n              cellSize, cellSizeInput, setCellSizeInput\n            }} />\n          </div>\n\n          <div className='control-container'>\n            <label htmlFor='fps'>Cycles per second</label>\n            <input type='number' id='fps' {...useInputControl(fpsInput, setFpsInput)} />\n            <Marker show={fpsInput !== fps} symbol='†' />\n          </div>\n        </div>\n\n        <div className='flex-col'>\n          <p><strong>*</strong>Start new game to apply</p>\n          <p><strong>†</strong>Update/start new game to apply</p>\n          <p>Resulting grid size:<br />{predictedSize}*{predictedSize}&nbsp;pixels</p>\n          {sizeWarning}\n        </div>\n      </div>\n\n      <div className='buttons-container'>\n        <button className='play-pause-button' onClick={() => toggleAnimation()}>{isAnimating ? '⏸️ Pause' : '▶️ Play'}</button>\n        <button onClick={updateGame}>Update</button>\n        <button onClick={newGame}>New game</button>\n        <button onClick={openSaveGridDialog}>Save</button>\n      </div>\n\n      <canvas ref={createCanvasContext} onClick={e => toggleCell(e)} width={gridSize * cellSize} height={gridSize * cellSize} />\n    </div>\n  </>);\n}\n\nexport default App;\n","import * as React from 'react'\n\ninterface IDimensions {\n  screenWidth: number\n  screenHeight: number\n}\n\n/**\n * If on PC, updates window size when it has not changed in set amount of time\n * @param delay Time to wait in milliseconds before updating state\n */\nexport function useWindowSize(delay: number): IDimensions {\n  const [screenSize, setScreenSize] = React.useState<IDimensions>({\n    screenWidth: window.innerWidth,\n    screenHeight: window.innerHeight\n  })\n\n  const isPC = React.useMemo(() => {\n    const testString = navigator.userAgent || navigator.vendor\n    // Regex patterns from http://detectmobilebrowsers.com/\n    const regex1 = /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i\n    const regex2 = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/\n\n    return !regex1.test(testString) && !regex2.test(testString.substr(0, 4))\n  }, [])\n\n  React.useEffect(() => {\n    if (isPC) {\n      let timer: NodeJS.Timeout | undefined = undefined\n      const resizeListener = () => {\n        if (timer) clearTimeout(timer)\n\n        timer = setTimeout(() => {\n          setScreenSize({\n            screenWidth: window.innerWidth,\n            screenHeight: window.innerHeight\n          })\n        }, delay)\n      }\n\n      window.addEventListener('resize', resizeListener)\n      return () => {\n        window.removeEventListener('resize', resizeListener)\n      }\n    }\n  }, [])\n\n  return screenSize\n}","import * as React from 'react'\n\n\n/**\n * Runs a callback at set number of frames per second, limited by number of frames your browser cn render per second\n * @param fps \n * @param callback \n */\nexport function useAnimationFrame<T>(\n  fps: number,\n  callback: (state?: T) => T | undefined\n): [() => void, boolean, () => void] {\n  const animationRef = React.useRef(0)\n  const prevTimeRef = React.useRef<number>()\n  const countRef = React.useRef(0)\n  const [isAnimating, setIsAnimating] = React.useState(false)\n  const [reanimate, setReanimate] = React.useState(false)\n\n  const animate = React.useCallback((time: number, state?: T) => {\n    if (prevTimeRef.current) {\n      const deltaTime = time - prevTimeRef.current\n      countRef.current += deltaTime\n      if (countRef.current > 1000 / fps) {\n        countRef.current = countRef.current - 1000 / fps\n        state = callback(state)\n      }\n    } else {\n      countRef.current = 0\n      state = callback(state)\n    }\n    prevTimeRef.current = time\n    animationRef.current = requestAnimationFrame(time => animate(time, state))\n  }, [callback, fps])\n\n  /** Pauses animation if playing, plays if paused */\n  const toggleAnimation = React.useCallback((state?: T) => {\n    if (isAnimating) {\n      cancelAnimationFrame(animationRef.current)\n    } else {\n      prevTimeRef.current = undefined\n      animationRef.current = requestAnimationFrame(time => animate(time, state))\n    }\n    setIsAnimating(prev => !prev)\n  }, [isAnimating, animate])\n\n  /** Pauses animation, then plays after any setStates you call have applied */\n  const tempPause = React.useCallback(() => {\n    if (isAnimating) {\n      setReanimate(true)\n      toggleAnimation()\n    }\n  }, [isAnimating, toggleAnimation])\n  React.useEffect(() => {\n    if (reanimate) {\n      setReanimate(false)\n      toggleAnimation()\n    }\n  }, [reanimate])\n\n  return [toggleAnimation, isAnimating, tempPause]\n}","import * as React from 'react'\n\n/** Returns dialog component, & function to open the dialog & set its contents */\nexport function useDialog(): [React.FC<{}>, (content?: JSX.Element) => void] {\n  const [content, setContent] = React.useState<JSX.Element>()\n  const [dialogOpen, setDialogOpen] = React.useState(false)\n\n  /** Open dialog, & optionally set content */\n  const openDialog = React.useCallback((content?: JSX.Element) => {\n    if (content) {\n      setContent(content)\n    }\n    setDialogOpen(true)\n  }, [])\n\n  /** Dialog with close button & custom contents, that blocks use of rest of screen */\n  const Dialog: React.FC = () => dialogOpen ?\n    <div className='dialog-background'>\n      <div className='dialog'>\n        <button onClick={() => setDialogOpen(false)}>Close</button>\n        <div className='content'>\n          {content}\n        </div>\n      </div>\n    </div>\n    :\n    <></>\n\n  return [Dialog, openDialog]\n}","import * as React from 'react'\n\n/** copyElementText copies text of elementRef  */\nexport function useCopyElementText(): [React.MutableRefObject<any>, () => void] {\n  const elementRef = React.useRef<any>()\n\n  const copyElementText = React.useCallback(() => {\n    if (!elementRef.current?.innerText) return\n    navigator.clipboard.writeText(elementRef.current.innerText)\n  }, [elementRef])\n\n  return [elementRef, copyElementText]\n}","import * as React from 'react';\n\nimport { TDep } from './useNewState';\nimport { TGrid } from '../utils';\n\n/** Creates new game based on inputs */\nexport function useNewGame(\n  patternInput: string,\n  setPattern: (value: React.SetStateAction<string>) => void,\n  customPatternInput: string,\n  setCustomPattern: (value: React.SetStateAction<string>) => void,\n  oddsInput: number,\n  setOdds: (newState: number) => void,\n  oddsDep: TDep<number>,\n  gridSizeInput: number,\n  setGridSize: (newState: number) => void,\n  gridSizeDep: TDep<number>,\n  cellSizeInput: number,\n  setCellSize: (value: React.SetStateAction<number>) => void,\n  fpsInput: number,\n  setFps: (value: React.SetStateAction<number>) => void,\n  isAnimating: boolean,\n  toggleAnimation: () => void,\n  createNewGrid: () => TGrid,\n  setCurrentGrid: (value: React.SetStateAction<TGrid>) => void,\n  drawGrid: (grid?: TGrid | undefined) => void\n) {\n  const newGame = React.useCallback(() => {\n    setPattern(patternInput)\n    setCustomPattern(customPatternInput)\n    setOdds(oddsInput)\n    setGridSize(gridSizeInput)\n    setCellSize(cellSizeInput)\n    setFps(fpsInput)\n  }, [patternInput, customPatternInput, oddsInput, gridSizeInput, cellSizeInput, fpsInput, setOdds, setGridSize, setCellSize, setCustomPattern, setFps, setPattern])\n\n  React.useEffect(() => {\n    if (isAnimating) {\n      toggleAnimation()\n    }\n    // Passing new grid to drawGrid, since new grid state set by initGrid() is not accessible yet\n    const newGrid = createNewGrid()\n    setCurrentGrid(newGrid)\n    drawGrid(newGrid)\n    // Using dependencies from useNewState, to make a new grid even if the grid properties haven't changed\n  }, [oddsDep, gridSizeDep])\n\n  return newGame\n}","import * as React from 'react';\n\n/** Updates current game with cell size & fps from inputs */\nexport function useUpdateGame(\n  cellSize: number,\n  setCellSize: (value: React.SetStateAction<number>) => void,\n  cellSizeInput: number,\n  fps: number,\n  setFps: (value: React.SetStateAction<number>) => void,\n  fpsInput: number,\n  tempPause: () => void,\n  drawGrid: () => void,\n) {\n  const updateGame = React.useCallback(() => {\n    tempPause()\n    setCellSize(cellSizeInput)\n    setFps(fpsInput)\n  }, [cellSizeInput, setCellSize, fpsInput, setFps, tempPause])\n\n  React.useEffect(() => {\n    drawGrid()\n  }, [cellSize, fps])\n\n  return updateGame\n}","import * as React from 'react'\n\nimport { TGrid } from '../utils'\n\n/** Creates starting grid on app load */\nexport function useStartingGrid(\n  canvasRef: React.MutableRefObject<HTMLCanvasElement | undefined>,\n  gridSizeInput: number,\n  screenWidth: number,\n  screenHeight: number,\n  cellSizeInput: number,\n  currentGrid: TGrid,\n  newSim: () => void,\n  setGridSizeInput: (value: React.SetStateAction<number>) => void\n) {\n  React.useEffect(() => {\n    if (canvasRef.current && !gridSizeInput) {\n      const controlsHeight = canvasRef.current.getBoundingClientRect().y\n      const viewMin = Math.min(screenWidth, screenHeight - controlsHeight)\n      setGridSizeInput(Math.floor(viewMin / cellSizeInput))\n    }\n  }, [canvasRef])\n\n  React.useEffect(() => {\n    if (!currentGrid.length && gridSizeInput) {\n      newSim()\n    }\n  }, [gridSizeInput])\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}